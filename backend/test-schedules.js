const axios = require('axios')

const API_BASE = 'http://localhost:5000/api'

// Configuraci√≥n de usuario de prueba
const credentials = {
  email: 'ramfiaogusto@gmail.com',
  password: '123456'
}

let authToken = ''

async function login() {
  try {
    const response = await axios.post(`${API_BASE}/auth/login`, credentials)
    if (response.data.success) {
      authToken = response.data.token
      console.log('‚úÖ Login exitoso')
      return true
    }
    return false
  } catch (error) {
    console.log('‚ùå Error en login:', error.response?.data?.message || error.message)
    return false
  }
}

async function cleanupDuplicateData() {
  console.log('\nüßπ Limpiando datos duplicados...')
  
  try {
    // Limpiar descansos duplicados
    const breaksResponse = await axios.get(`${API_BASE}/schedules/recurring-breaks`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })
    
    if (breaksResponse.data.success) {
      const breaks = breaksResponse.data.data
      const seenBreaks = new Set()
      
      for (const breakItem of breaks) {
        const key = `${breakItem.name}-${breakItem.startTime}-${breakItem.endTime}`
        if (seenBreaks.has(key)) {
          // Eliminar duplicado
          await axios.delete(`${API_BASE}/schedules/recurring-breaks/${breakItem._id}`, {
            headers: { 'Authorization': `Bearer ${authToken}` }
          })
          console.log(`   Eliminado descanso duplicado: ${breakItem.name}`)
        } else {
          seenBreaks.add(key)
        }
      }
    }

    // Limpiar excepciones duplicadas
    const exceptionsResponse = await axios.get(`${API_BASE}/schedules/exceptions`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })
    
    if (exceptionsResponse.data.success) {
      const exceptions = exceptionsResponse.data.data
      const seenExceptions = new Set()
      
      for (const exception of exceptions) {
        const key = `${exception.name}-${exception.startDate}-${exception.endDate}`
        if (seenExceptions.has(key)) {
          // Eliminar duplicado
          await axios.delete(`${API_BASE}/schedules/exceptions/${exception._id}`, {
            headers: { 'Authorization': `Bearer ${authToken}` }
          })
          console.log(`   Eliminada excepci√≥n duplicada: ${exception.name}`)
        } else {
          seenExceptions.add(key)
        }
      }
    }

    console.log('‚úÖ Limpieza completada')
    
  } catch (error) {
    console.log('‚ùå Error en limpieza:', error.response?.data?.message || error.message)
  }
}

async function testBusinessHours() {
  console.log('\nüìÖ Probando horarios base...')
  
  try {
    // 1. Obtener horarios actuales
    console.log('1. Obteniendo horarios actuales:')
    const getResponse = await axios.get(`${API_BASE}/schedules/business-hours`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })
    
    if (getResponse.data.success) {
      console.log('‚úÖ Horarios obtenidos')
      console.log(`   D√≠as configurados: ${getResponse.data.data.length}`)
      getResponse.data.data.forEach(day => {
        console.log(`   ${day.dayName}: ${day.isActive ? `${day.startTime}-${day.endTime}` : 'Cerrado'}`)
      })
    }

    // 2. Configurar horarios de ejemplo
    console.log('\n2. Configurando horarios de ejemplo:')
    const scheduleData = [
      { dayOfWeek: 0, isActive: false }, // Domingo - cerrado
      { dayOfWeek: 1, isActive: true, startTime: '09:00', endTime: '18:00' }, // Lunes
      { dayOfWeek: 2, isActive: true, startTime: '09:00', endTime: '18:00' }, // Martes
      { dayOfWeek: 3, isActive: false }, // Mi√©rcoles - cerrado
      { dayOfWeek: 4, isActive: true, startTime: '09:00', endTime: '18:00' }, // Jueves
      { dayOfWeek: 5, isActive: true, startTime: '09:00', endTime: '20:00' }, // Viernes
      { dayOfWeek: 6, isActive: true, startTime: '08:00', endTime: '17:00' }  // S√°bado
    ]

    const updateResponse = await axios.put(`${API_BASE}/schedules/business-hours`, {
      schedule: scheduleData
    }, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })

    if (updateResponse.data.success) {
      console.log('‚úÖ Horarios actualizados exitosamente')
    }

  } catch (error) {
    console.log('‚ùå Error en horarios base:', error.response?.data?.message || error.message)
  }
}

async function testRecurringBreaks() {
  console.log('\n‚òï Probando descansos recurrentes...')
  
  try {
    // Verificar si ya existen descansos
    const existingBreaks = await axios.get(`${API_BASE}/schedules/recurring-breaks`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })

    const hasLunchBreak = existingBreaks.data.data?.find(b => b.name === 'Almuerzo')
    const hasWednesdayBreak = existingBreaks.data.data?.find(b => b.name === 'Descanso Mi√©rcoles')

    // 1. Crear descanso de almuerzo diario (solo si no existe)
    if (!hasLunchBreak) {
      console.log('1. Creando descanso de almuerzo:')
      const lunchBreak = {
        name: 'Almuerzo',
        startTime: '13:00',
        endTime: '14:00',
        recurrenceType: 'daily',
        specificDays: []
      }

      const lunchResponse = await axios.post(`${API_BASE}/schedules/recurring-breaks`, lunchBreak, {
        headers: { 'Authorization': `Bearer ${authToken}` }
      })

      if (lunchResponse.data.success) {
        console.log('‚úÖ Descanso de almuerzo creado')
        console.log(`   ID: ${lunchResponse.data.data._id}`)
      }
    } else {
      console.log('1. Descanso de almuerzo ya existe ‚úì')
    }

    // 2. Crear descanso espec√≠fico para mi√©rcoles (solo si no existe)
    if (!hasWednesdayBreak) {
      console.log('\n2. Creando descanso espec√≠fico para mi√©rcoles:')
      const wednesdayBreak = {
        name: 'Descanso Mi√©rcoles',
        startTime: '15:00',
        endTime: '16:00',
        recurrenceType: 'specific_days',
        specificDays: [3] // Mi√©rcoles
      }

      const wedResponse = await axios.post(`${API_BASE}/schedules/recurring-breaks`, wednesdayBreak, {
        headers: { 'Authorization': `Bearer ${authToken}` }
      })

      if (wedResponse.data.success) {
        console.log('‚úÖ Descanso de mi√©rcoles creado')
        console.log(`   ID: ${wedResponse.data.data._id}`)
      }
    } else {
      console.log('\n2. Descanso de mi√©rcoles ya existe ‚úì')
    }

    // 3. Listar todos los descansos
    console.log('\n3. Listando todos los descansos:')
    const listResponse = await axios.get(`${API_BASE}/schedules/recurring-breaks`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })

    if (listResponse.data.success) {
      console.log(`‚úÖ ${listResponse.data.data.length} descansos encontrados:`)
      listResponse.data.data.forEach(breakItem => {
        console.log(`   - ${breakItem.name}: ${breakItem.startTime}-${breakItem.endTime}`)
        console.log(`     ${breakItem.recurrenceDescription}`)
      })
    }

  } catch (error) {
    console.log('‚ùå Error en descansos:', error.response?.data?.message || error.message)
  }
}

async function testScheduleExceptions() {
  console.log('\nüö´ Probando excepciones de horario...')
  
  try {
    // Verificar excepciones existentes
    const existingExceptions = await axios.get(`${API_BASE}/schedules/exceptions`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })

    const hasVacation = existingExceptions.data.data?.find(e => e.name === 'Vacaciones de Verano')
    const hasChristmas = existingExceptions.data.data?.find(e => e.name === 'V√≠spera de Navidad')
    const hasNewYear = existingExceptions.data.data?.find(e => e.name === 'A√±o Nuevo')

    // 1. Crear d√≠a libre (vacaciones) solo si no existe
    if (!hasVacation) {
      console.log('1. Creando per√≠odo de vacaciones:')
      const vacation = {
        name: 'Vacaciones de Verano',
        exceptionType: 'vacation',
        startDate: '2025-07-15',
        endDate: '2025-07-30',
        reason: 'Vacaciones familiares programadas'
      }

      const vacationResponse = await axios.post(`${API_BASE}/schedules/exceptions`, vacation, {
        headers: { 'Authorization': `Bearer ${authToken}` }
      })

      if (vacationResponse.data.success) {
        console.log('‚úÖ Vacaciones creadas')
        console.log(`   ID: ${vacationResponse.data.data._id}`)
        console.log(`   Duraci√≥n: ${vacationResponse.data.data.durationDays} d√≠as`)
      }
    } else {
      console.log('1. Vacaciones ya existen ‚úì')
    }

    // 2. Crear horario especial para Navidad solo si no existe
    if (!hasChristmas) {
      console.log('\n2. Creando horario especial para Navidad:')
      const christmas = {
        name: 'V√≠spera de Navidad',
        exceptionType: 'special_hours',
        startDate: '2025-12-24',
        endDate: '2025-12-24',
        specialStartTime: '09:00',
        specialEndTime: '14:00',
        isRecurringAnnually: true,
        reason: 'Horario especial para la v√≠spera de Navidad'
      }

      const christmasResponse = await axios.post(`${API_BASE}/schedules/exceptions`, christmas, {
        headers: { 'Authorization': `Bearer ${authToken}` }
      })

      if (christmasResponse.data.success) {
        console.log('‚úÖ Horario especial de Navidad creado')
        console.log(`   ID: ${christmasResponse.data.data._id}`)
        console.log(`   Horario especial: ${christmasResponse.data.data.specialStartTime}-${christmasResponse.data.data.specialEndTime}`)
      }
    } else {
      console.log('\n2. Horario especial de Navidad ya existe ‚úì')
    }

    // 3. Crear d√≠a festivo recurrente solo si no existe
    if (!hasNewYear) {
      console.log('\n3. Creando d√≠a festivo (A√±o Nuevo):')
      const newYear = {
        name: 'A√±o Nuevo',
        exceptionType: 'holiday',
        startDate: '2025-01-01',
        endDate: '2025-01-01',
        isRecurringAnnually: true,
        reason: 'D√≠a festivo nacional'
      }

      const newYearResponse = await axios.post(`${API_BASE}/schedules/exceptions`, newYear, {
        headers: { 'Authorization': `Bearer ${authToken}` }
      })

      if (newYearResponse.data.success) {
        console.log('‚úÖ D√≠a festivo creado')
        console.log(`   ID: ${newYearResponse.data.data._id}`)
      }
    } else {
      console.log('\n3. D√≠a festivo ya existe ‚úì')
    }

    // 4. Listar todas las excepciones
    console.log('\n4. Listando todas las excepciones:')
    const listResponse = await axios.get(`${API_BASE}/schedules/exceptions`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })

    if (listResponse.data.success) {
      console.log(`‚úÖ ${listResponse.data.data.length} excepciones encontradas:`)
      listResponse.data.data.forEach(exception => {
        console.log(`   - ${exception.name} (${exception.typeDescription})`)
        console.log(`     ${new Date(exception.startDate).toLocaleDateString()} - ${new Date(exception.endDate).toLocaleDateString()}`)
        if (exception.hasSpecialHours) {
          console.log(`     Horario especial: ${exception.specialStartTime}-${exception.specialEndTime}`)
        }
      })
    }

  } catch (error) {
    console.log('‚ùå Error en excepciones:', error.response?.data?.message || error.message)
  }
}

async function testAdvancedAvailability() {
  console.log('\nüîç Probando disponibilidad avanzada...')
  
  try {
    // Obtener servicios disponibles
    const servicesResponse = await axios.get(`${API_BASE}/services`, {
      headers: { 'Authorization': `Bearer ${authToken}` }
    })

    if (!servicesResponse.data.success || !servicesResponse.data.data || servicesResponse.data.data.length === 0) {
      console.log('‚ö†Ô∏è No hay servicios disponibles para probar - creando servicio de prueba...')
      
      // Crear un servicio de prueba
      try {
        const testService = {
          name: 'Corte Cl√°sico',
          description: 'Corte de cabello tradicional',
          category: 'corte',
          price: 25,
          duration: 30,
          requiresPayment: false
        }

        const createServiceResponse = await axios.post(`${API_BASE}/services`, testService, {
          headers: { 'Authorization': `Bearer ${authToken}` }
        })

        if (createServiceResponse.data.success) {
          console.log('‚úÖ Servicio de prueba creado')
          // Usar el servicio reci√©n creado
          const firstService = createServiceResponse.data.data
          await testAvailabilityWithService(firstService)
        } else {
          console.log('‚ùå No se pudo crear servicio de prueba')
          return
        }
      } catch (error) {
        console.log('‚ùå Error creando servicio de prueba:', error.response?.data?.message || error.message)
        return
      }
    } else {
      const firstService = servicesResponse.data.data[0]
      await testAvailabilityWithService(firstService)
    }

  } catch (error) {
    console.log('‚ùå Error en disponibilidad avanzada:', error.response?.data?.message || error.message)
  }
}

async function testAvailabilityWithService(service) {
  console.log(`   Usando servicio: ${service.name}`)

  // 1. Probar disponibilidad para un lunes (d√≠a laborable)
  console.log('\n1. Probando disponibilidad para un lunes:')
  const monday = '2025-06-02' // Un lunes futuro
  
  try {
    const mondayResponse = await axios.get(`${API_BASE}/schedules/availability/advanced`, {
      params: { date: monday, serviceId: service._id },
      headers: { 'Authorization': `Bearer ${authToken}` }
    })

    if (mondayResponse.data.success) {
      const mondayData = mondayResponse.data.data
      console.log(`   ‚úÖ Lunes ${monday}:`)
      console.log(`      Es d√≠a laborable: ${mondayData.isBusinessDay}`)
      if (mondayData.isBusinessDay) {
        console.log(`      Horario: ${mondayData.businessHours.start}-${mondayData.businessHours.end}`)
        console.log(`      Especial: ${mondayData.businessHours.isSpecial}`)
        console.log(`      Descansos: ${mondayData.breaks.length}`)
        console.log(`      Slots disponibles: ${mondayData.totalSlots}`)
      } else {
        console.log(`      Raz√≥n: ${mondayData.reason || 'N/A'}`)
      }
    } else {
      console.log(`   ‚ùå Error: ${mondayResponse.data.message}`)
    }
  } catch (error) {
    console.log(`   ‚ùå Error en lunes: ${error.response?.data?.message || error.message}`)
  }

  // 2. Probar disponibilidad para mi√©rcoles (cerrado)
  console.log('\n2. Probando disponibilidad para mi√©rcoles (cerrado):')
  const wednesday = '2025-06-04' // Un mi√©rcoles futuro
  
  try {
    const wedResponse = await axios.get(`${API_BASE}/schedules/availability/advanced`, {
      params: { date: wednesday, serviceId: service._id },
      headers: { 'Authorization': `Bearer ${authToken}` }
    })

    if (wedResponse.data.success) {
      const wedData = wedResponse.data.data
      console.log('   ‚úÖ Disponibilidad para mi√©rcoles obtenida')
      console.log(`      Es d√≠a laborable: ${wedData.isBusinessDay}`)
      if (wedData.isBusinessDay) {
        console.log(`      Horario: ${wedData.businessHours.start}-${wedData.businessHours.end}`)
        console.log(`      Slots disponibles: ${wedData.totalSlots}`)
      } else {
        console.log(`      Raz√≥n: ${wedData.reason || 'N/A'}`)
      }
    } else {
      console.log(`   ‚ùå Error: ${wedResponse.data.message}`)
    }
  } catch (error) {
    console.log(`   ‚ùå Error en mi√©rcoles: ${error.response?.data?.message || error.message}`)
  }
}

async function testPublicAvailabilityWithSchedules() {
  console.log('\nüåê Probando disponibilidad p√∫blica con horarios avanzados...')
  
  try {
    const username = 'ramfi_aog'
    
    // Obtener servicios del sal√≥n p√∫blico
    const salonResponse = await axios.get(`${API_BASE}/public/salon/${username}`)
    
    if (!salonResponse.data.success || salonResponse.data.data.services.length === 0) {
      console.log('‚ö†Ô∏è No hay servicios p√∫blicos disponibles')
      return
    }

    const firstService = salonResponse.data.data.services[0]
    console.log(`   Usando servicio p√∫blico: ${firstService.name}`)

    // Probar varios d√≠as
    const testDates = [
      { date: '2025-06-02', name: 'Lunes (laborable)' },
      { date: '2025-06-04', name: 'Mi√©rcoles (cerrado)' },
      { date: '2025-06-01', name: 'Domingo (cerrado)' },
      { date: '2025-12-24', name: 'V√≠spera Navidad (especial)' }
    ]

    for (const testDate of testDates) {
      console.log(`\n   Probando ${testDate.name}:`)
      
      const response = await axios.get(`${API_BASE}/public/salon/${username}/availability`, {
        params: { date: testDate.date, serviceId: firstService._id }
      })

      if (response.data.success) {
        const data = response.data.data
        console.log(`   ‚úÖ Es d√≠a laborable: ${data.isBusinessDay}`)
        
        if (data.isBusinessDay) {
          console.log(`      Horario: ${data.businessHours.start}-${data.businessHours.end}`)
          console.log(`      Especial: ${data.businessHours.isSpecial}`)
          console.log(`      Slots: ${data.totalSlots}`)
        } else {
          console.log(`      Raz√≥n: ${data.reason}`)
        }
      }
    }

  } catch (error) {
    console.log('‚ùå Error en disponibilidad p√∫blica:', error.response?.data?.message || error.message)
  }
}

async function runAllTests() {
  console.log('üéØ Iniciando pruebas del sistema de horarios avanzado...\n')

  // Login
  const loginSuccess = await login()
  if (!loginSuccess) {
    console.log('‚ùå No se pudo hacer login. Abortando pruebas.')
    return
  }

  // Limpiar datos duplicados
  await cleanupDuplicateData()

  // Ejecutar todas las pruebas
  await testBusinessHours()
  await testRecurringBreaks()
  await testScheduleExceptions()
  await testAdvancedAvailability()
  await testPublicAvailabilityWithSchedules()

  console.log('\nüéâ Todas las pruebas completadas!')
  console.log('\nüìã Resumen:')
  console.log('   ‚úÖ Horarios base - configurados')
  console.log('   ‚úÖ Descansos recurrentes - creados')
  console.log('   ‚úÖ Excepciones - configuradas')
  console.log('   ‚úÖ Disponibilidad avanzada - funcionando')
  console.log('   ‚úÖ API p√∫blica - actualizada')
}

// Ejecutar las pruebas
runAllTests().catch(console.error) 