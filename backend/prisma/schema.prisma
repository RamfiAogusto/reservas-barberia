// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  phone     String
  salonName String
  address   String
  role      UserRole @default(OWNER)
  isActive  Boolean  @default(true)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  appointments      Appointment[]
  services          Service[]
  businessHours     BusinessHour[]
  businessImages    BusinessImage[]
  recurringBreaks   RecurringBreak[]
  scheduleExceptions ScheduleException[]

  @@map("users")
}

model Service {
  id               String      @id @default(cuid())
  userId           String
  name             String
  description      String?
  price            Float
  duration         Int         // en minutos
  showDuration     Boolean     @default(true)  // Nuevo: controla si mostrar duración al público
  requiresPayment  Boolean     @default(false)
  depositAmount    Float       @default(0)
  isActive         Boolean     @default(true)
  category         ServiceCategory @default(CORTE)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relaciones
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@map("services")
}

model Appointment {
  id            String            @id @default(cuid())
  userId        String
  serviceId     String
  clientName    String
  clientEmail   String
  clientPhone   String
  date          DateTime
  time          String
  status        AppointmentStatus @default(PENDIENTE)
  notes         String?
  staffMember   String?
  totalAmount   Float
  paidAmount    Float             @default(0)
  paymentStatus PaymentStatus     @default(PENDIENTE)
  paymentMethod PaymentMethod     @default(EFECTIVO)
  reminderSent  Boolean           @default(false)
  cancelledAt   DateTime?
  cancelReason  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relaciones
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model BusinessHour {
  id        String   @id @default(cuid())
  userId    String
  dayOfWeek Int      // 0 = Domingo, 1 = Lunes, ..., 6 = Sábado
  startTime String
  endTime   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dayOfWeek])
  @@map("business_hours")
}

model BusinessImage {
  id                  String        @id @default(cuid())
  userId              String
  imageUrl            String
  cloudinaryPublicId  String
  title               String?
  description         String?
  category            ImageCategory @default(OTROS)
  order               Int           @default(0)
  isActive            Boolean       @default(true)
  isFeatured          Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_images")
}

model RecurringBreak {
  id             String               @id @default(cuid())
  userId         String
  name           String
  startTime      String
  endTime        String
  recurrenceType RecurrenceType
  specificDays   Int[]                // Array de días: [1, 2, 3] para Lun, Mar, Mié
  isActive       Boolean              @default(true)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recurring_breaks")
}

model ScheduleException {
  id                 String        @id @default(cuid())
  userId             String
  name               String
  exceptionType      ExceptionType
  startDate          DateTime
  endDate            DateTime
  specialStartTime   String?
  specialEndTime     String?
  isRecurringAnnually Boolean      @default(false)
  reason             String?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("schedule_exceptions")
}

// Enums
enum UserRole {
  ADMIN
  OWNER
  BARBER
  CLIENT
}

enum ServiceCategory {
  CORTE
  BARBA
  COMBO
  TRATAMIENTO
  OTRO
}

enum AppointmentStatus {
  PENDIENTE
  CONFIRMADA
  COMPLETADA
  CANCELADA
  NO_ASISTIO
}

enum PaymentStatus {
  PENDIENTE
  PARCIAL
  COMPLETO
  REEMBOLSADO
}

enum PaymentMethod {
  EFECTIVO
  TARJETA
  TRANSFERENCIA
  STRIPE
  PAYPAL
}

enum ImageCategory {
  EXTERIOR
  INTERIOR
  SERVICIOS
  EQUIPO
  OTROS
}

enum RecurrenceType {
  DAILY
  WEEKLY
  SPECIFIC_DAYS
}

enum ExceptionType {
  DAY_OFF
  SPECIAL_HOURS
  VACATION
  HOLIDAY
} 